statements  : NUEVALINEA * declaración (NUEVALINEA + declaración) * NUEVALINEA *

declaración : PALABRA CLAVE: RETURN expr?
            : PALABRA CLAVE: CONTINUE
            : PALABRA CLAVE: BREAK
            : expr

expr        : KEYWORD:VAR IDENTIFICAR EQ expr
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

expr        : PALABRA CLAVE: VAR IDENTIFICAR EQ expr
            : comp-expr ((PALABRA CLAVE:AND| PALABRA CLAVE:OR) comp-expr) *

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  :	term ((MAS|MENOS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (MAS|MENOS) factor
            : poder

poder       : llamar (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:IF expr KEYWORD:THEN
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expr KEYWORD:THEN
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:ELSE
              statement
            | (NEWLINE statements KEYWORD:END)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
              (KEYWORD:STEP expr)? KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expr KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUN IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)
            | (NEWLINE statements KEYWORD:END)
